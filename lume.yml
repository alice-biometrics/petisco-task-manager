name: taskmanager

install:
  run: pip install -r requirements/dev.txt -r requirements/test.txt -r requirements/requirements.txt

steps:
  clean:
    run:
    - rm -rf deps
    - rm -rf output
    - rm -rf docs/build
    - find . | grep -E "(__pycache__|\.pyc|\.pyo$)" | xargs rm -rf
  lint:
    run:
    - black .
    - flake8 taskmanager
  test:
    run: pytest
  docker-rebuild:
    run: docker-compose build --pull --force-rm --no-cache
  test-e2e-local-python:
    envs:
      END2END_TEST: "True"
      PETISCO_PORT: "8080"
      TASK_REPOSITORY_TYPE: sqlite # declared already in pytest.ini
      SQL_SERVER: sqlite  # declared already in pytest.ini
      SQL_DATABASE: tasmanager_test.db  # declared already in pytest.ini
    setup_detach:
      log_filename: taskmanager.log
      run: python -m taskmanager
    run: pytest -m end2end --variables tests/end2end/envs/local.yml
    teardown:
      - echo ${SQL_DATABASE}
      - rm ${SQL_DATABASE}
  test-e2e-local:
    envs:
      END2END_TEST: True
      GUNICORN_WORKERS: 1
      TASK_REPOSITORY_TYPE: mysql # declared already in pytest.ini
      SQL_SERVER: mysql # declared already in pytest.ini
      SQL_DATABASE: taskmanager
      MYSQL_DATABASE: taskmanager
      MYSQL_USER: root
      MYSQL_PASSWORD: root
      MYSQL_HOST: localhost
      MYSQL_PORT: 3307
    setup: docker-compose up -d
    run: pytest -m end2end --variables tests/end2end/envs/local.yml
    teardown:
      - docker-compose down
  test-e2e-staging:
    envs:
      END2END_TEST: True
    run:
      - pytest -m end2end --variables tests/end2end/envs/staging.yml
  test-e2e-pro:
    envs:
      END2END_TEST: True
    run:
      - pytest -m end2end --variables tests/end2end/envs/pro.yml